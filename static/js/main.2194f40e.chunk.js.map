{"version":3,"sources":["reducers/postReducer.js","reducers/index.js","store.js","components/PostForm.jsx","actions/postActions.js","components/Posts.jsx","containers/App.jsx","registerServiceWorker.js","index.js"],"names":["intialState","items","item","combineReducers","posts","state","arguments","length","undefined","action","type","Object","objectSpread","payload","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","PostForm","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","e","setState","defineProperty","target","name","value","onSubmit","preventDefault","post","title","body","props","createPost","react_default","a","createElement","Component","PropTypes","func","isRequired","connect","postData","dispatch","fetch","method","headers","content-type","JSON","stringify","then","res","json","Posts","fetchPosts","nextProps","newPost","unshift","postItems","map","key","id","array","object","response","catch","error","console","log","App","es","className","components_PostForm","components_Posts","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","src_containers_App","document","getElementById","URL","process","origin","addEventListener","concat","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.2194f40e.chunk.js","sourcesContent":["import {\r\n\tFETCH_POSTS,\r\n\tNEW_POST\r\n} from \"../actions/types\";\r\n\r\nconst intialState = {\r\n\titems: [],\r\n\titem: {}\r\n}\r\n\r\n\r\nexport default function (state = intialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase \"FETCH_POSTS\":\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\titems: action.payload\r\n\t\t\t}\r\n\t\tcase \"NEW_POST\":\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\titem: action.payload\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import {combineReducers} from \"redux\";\r\nimport postReducer from \"./postReducer\";\r\n\r\n\r\nexport default combineReducers({\r\n\tposts: postReducer,\r\n});","import {\r\n\tcreateStore,\r\n\tapplyMiddleware,\r\n\tcompose\r\n} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers/index\";\r\n\r\nconst intialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n\trootReducer,\r\n\tintialState,\r\n\tcompose(\r\n\t\tapplyMiddleware(...middleware)\r\n\t));\r\n\r\nexport default store;","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { createPost } from \"../actions/postActions\";\r\n\r\nclass PostForm extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\ttitle: \"\",\r\n\t\t\tbody: \"\"\r\n\t\t};\r\n\t}\r\n\r\n\tonChange = e => {\r\n\t\tthis.setState({ [e.target.name]: e.target.value });\r\n\t};\r\n\r\n\tonSubmit = e => {\r\n\t\te.preventDefault();\r\n\r\n\t\tconst post = {\r\n\t\t\ttitle: this.state.title,\r\n\t\t\tbody: this.state.body\r\n\t\t};\r\n\r\n\t\tthis.props.createPost(post);\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h1>Add Post</h1>\r\n\t\t\t\t<form onSubmit={this.onSubmit}>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<label>Title:</label>\r\n\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\tname=\"title\"\r\n\t\t\t\t\t\t\tvalue={this.state.title}\r\n\t\t\t\t\t\t\tonChange={this.onChange}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<label>Body:</label>\r\n\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t<textarea\r\n\t\t\t\t\t\t\tname=\"body\"\r\n\t\t\t\t\t\t\tvalue={this.state.body}\r\n\t\t\t\t\t\t\tonChange={this.onChange}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t<button type=\"submit\">Submit</button>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n// eslint-disable-next-line react/no-typos\r\nPostForm.PropTypes = {\r\n\tcreatePost: PropTypes.func.isRequired\r\n}\r\n\r\nexport default connect(null, { createPost })(PostForm);\r\n","import {\r\n  FETCH_POSTS,\r\n  NEW_POST\r\n} from \"./types\";\r\n\r\nexport const fetchPosts = () => dispatch => {\r\n  fetch(\"https://jsonplaceholder.typicode.com/posts\")\r\n    .then(response => response.json())\r\n    .then(posts => dispatch({\r\n      type: 'FETCH_POSTS',\r\n      payload: posts\r\n    }))\r\n    .catch(error => console.log(error));\r\n}\r\n\r\nexport const createPost = postData => dispatch => {\r\n  fetch(\"https://jsonplaceholder.typicode.com/posts\", {\r\n      method: 'POST',\r\n      headers: {\r\n        \"content-type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(postData)\r\n    })\r\n    .then(res => res.json())\r\n    .then(post => dispatch({\r\n      type: 'NEW_POST',\r\n      payload: post\r\n    }));\r\n}","import React, {Component} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchPosts } from \"../actions/postActions\";\r\n\r\nclass Posts extends Component {\r\n\r\n\tcomponentWillMount () {\r\n\t\tthis.props.fetchPosts();\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps){\r\n    if(nextProps.newPost) {\r\n      this.props.posts.unshift(nextProps.newPost);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const postItems = this\r\n      .props\r\n      .posts\r\n      .map(post => (\r\n        <div key={post.id}>\r\n          <h3>{post.title}</h3>\r\n          <p>{post.body}</p>\r\n        </div>\r\n      ));\r\n    return (\r\n      <div>\r\n        <h1>Posts</h1>\r\n        {postItems}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n// eslint-disable-next-line react/no-typos\r\nPosts.PropTypes = {\r\n\tfetchPosts: PropTypes.func.isRequired,\r\n  posts: PropTypes.array.isRequired,\r\n  newPost: PropTypes.object\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  posts: state.posts.items,\r\n  newPost: state.posts.item\r\n});\r\n\r\nexport default connect(mapStateToProps, { fetchPosts })(Posts);\r\n","import React, { Component } from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../store\";\r\nimport PostForm from \"../components/PostForm\";\r\nimport Posts from \"../components/Posts\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Provider store={store}>\r\n\t\t\t\t<div className=\"App\">\r\n\t\t\t\t\t<PostForm />\r\n\t\t\t\t\t<hr />\r\n\t\t\t\t\t<Posts />\r\n\t\t\t\t</div>\r\n\t\t\t</Provider>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}